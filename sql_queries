-- STARTING  9 APRIL 2022  -- ENDED 15 APRIL 2022

CREATE SCHEMA pizza_runner;
USE pizza_runner;
-- SET search_path = pizza_runner;


CREATE TABLE runners (
  runner_id INTEGER,
  registration_date DATE
);
INSERT INTO runners
  (runner_id, registration_date)
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');



CREATE TABLE customer_orders (
  order_id INTEGER,
  customer_id INTEGER,
  pizza_id INTEGER,
  exclusions VARCHAR(4),
  extras VARCHAR(4),
  order_time TIMESTAMP
);

INSERT INTO customer_orders
  (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');



CREATE TABLE runner_orders (
  order_id INTEGER,
  runner_id INTEGER,
  pickup_time VARCHAR(19),
  distance VARCHAR(7),
  duration VARCHAR(10),
  cancellation VARCHAR(23)
);

INSERT INTO runner_orders
  (order_id, runner_id, pickup_time, distance, duration, cancellation)
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');



CREATE TABLE pizza_names (
  pizza_id INTEGER,
  pizza_name TEXT
);
INSERT INTO pizza_names
  (pizza_id, pizza_name)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');



CREATE TABLE pizza_recipes (
  pizza_id INTEGER,
  toppings TEXT
);
INSERT INTO pizza_recipes
  (pizza_id, toppings)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');



CREATE TABLE pizza_toppings (
  topping_id INTEGER,
  topping_name TEXT
);
INSERT INTO pizza_toppings
  (topping_id, topping_name)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


-- A PIZZA METRICS
-- 1 How many pizzas were ordered?
-- 2 How many unique customer orders were made?
-- 3 How many successful orders were delivered by each runner?
-- 4 How many of each type of pizza was delivered?
-- 5 How many Vegetarian and Meatlovers were ordered by each customer?
-- 6 What was the maximum number of pizzas delivered in a single order?
-- 7 For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
-- 8 How many pizzas were delivered that had both exclusions and extras?
-- 9 What was the total volume of pizzas ordered for each hour of the day?
-- 10 What was the volume of orders for each day of the week?


-- overview of the tables
SELECT * FROM runner_orders;
SELECT * FROM runners;
SELECT * FROM customer_orders;
SELECT * FROM pizza_names;
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;

-- DATA CLEANING
-- after analyzing the tables, I found incosistent data (nispelled, null values, etc...) on runner_orders and customer_orders;

-- fixing runner_orders
SELECT 
	CAST(distance AS DECIMAL(10,2)) AS distance_in_km,
    CAST(duration AS DECIMAL) AS duration_in_minutes,
    CASE WHEN cancellation IS NULL OR cancellation IN("null", "") THEN "No canc" ELSE cancellation END AS cancellation,
    CASE WHEN pickup_time = "null" THEN "no" ELSE pickup_time END AS pickup_time
FROM runner_orders;

-- fixing customer_orders
SELECT
	CASE WHEN exclusions IS NULL OR exclusions IN("null", "") THEN "no" ELSE exclusions END AS exclusions,
    CASE WHEN extras IS NULL OR extras IN("null", "") THEN "no" ELSE extras END AS extras
FROM customer_orders;

-- update runner_orders
UPDATE runner_orders
SET pickup_time = "no"
WHERE pickup_time = "null";

UPDATE runner_orders
SET cancellation = "No canc"
WHERE cancellation IS NULL OR cancellation IN ("null", "");

UPDATE runner_orders
SET distance = REPLACE(distance, "km", "");

-- because cast it doesn't work on UPDATE, I have to use REPLACE to remove the km etc and then use CAST
SELECT REPLACE(distance, "km", "")
FROM runner_orders;

-- trim the column distance
UPDATE runner_orders
SET distance = TRIM(distance);
--

-- there is no need to convert as decimal, I can use the varchar for calculation as well 
-- UPDATE runner_orders
-- SET distance = CAST(distance AS DECIMAL(10,2)):
-- see below
SELECT
	distance * 2 AS distance_multiplied
FROM runner_orders;
--
UPDATE runner_orders
SET distance = 0
WHERE distance = "null";


-- fixing the duration column
UPDATE runner_orders
SET duration = REPLACE(duration, "minutes", "");

UPDATE runner_orders
SET duration = REPLACE(duration, "minute", "");

UPDATE runner_orders
SET duration = REPLACE(duration, "mins", "");

UPDATE runner_orders
SET duration = 0
WHERE duration = "null";

SELECT * FROM runner_orders;

 -- update customer_orders
SELECT * FROM customer_orders;

UPDATE customer_orders
SET exclusions = 0
WHERE exclusions IN("null", "");

UPDATE customer_orders
SET extras = 0
WHERE extras IS NULL OR extras IN("null", "");

-- All tables cleaned, let's start with the analysis

-- 1 How many pizzas were ordered?
SELECT 
	COUNT(c.order_id) AS total_orders
FROM customer_orders c
	LEFT JOIN runner_orders r
		ON c.order_id = r.order_id
WHERE r.cancellation = "No canc"
;


-- 2 How many unique customer orders were made?
SELECT 
	COUNT(DISTINCT customer_id)
FROM customer_orders;

-- 3 How many successful orders were delivered by each runner?
SELECT
	runner_id,
	COUNT(order_id) AS total_orders_delivered
FROM runner_orders
WHERE cancellation = "No canc"
GROUP BY runner_id;

-- 4 How many of each type of pizza was delivered?
SELECT
	pn.pizza_name,
    COUNT(co.pizza_id) AS total_pizzas
FROM customer_orders co
	LEFT JOIN pizza_names pn
		ON co.pizza_id = pn.pizza_id
GROUP BY 1;

-- 5 How many Vegetarian and Meatlovers were ordered by each customer?
SELECT
	co.customer_id,
    COUNT(CASE WHEN co.pizza_id = 1 THEN co.pizza_id ELSE NULL END) AS Meatlovers,
    COUNT(CASE WHEN co.pizza_id = 2 THEN co.pizza_id ELSE NULL END) AS Vegetarian
FROM customer_orders co
	LEFT JOIN pizza_names pn
		ON co.pizza_id = pn.pizza_id
GROUP BY 1
ORDER BY 1;

-- 6 What was the maximum number of pizzas delivered in a single order?
SELECT 
	order_id,
	COUNT(order_id) AS total_pizzas
FROM customer_orders
GROUP BY 1
ORDER BY 2 DESC;

-- 7 For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT 
	customer_id,
    COUNT(CASE WHEN exclusions = 0 AND extras = 0 THEN order_id ELSE NULL END) AS pizza_with_no_changes,
    COUNT(CASE WHEN exclusions <> 0 OR extras <> 0 THEN order_id ELSE NULL END) AS pizza_with_changes
FROM customer_orders
GROUP BY 1;

-- 8 How many pizzas were delivered that had both exclusions and extras?
SELECT 
	COUNT(CASE WHEN exclusions <> 0 AND extras <> 0 THEN order_id ELSE NULL END) AS pizza_with_exclusions_and_extras
FROM customer_orders;

-- 9 What was the total volume of pizzas ordered for each hour of the day?
SELECT
	HOUR(order_time) AS hour_time,
	COUNT(order_id) AS orders
FROM customer_orders
GROUP BY 1
ORDER BY 2 DESC;

-- 10 What was the volume of orders for each day of the week?
SELECT
	WEEKDAY(order_time) AS day_of_the_week,
    COUNT(order_id) AS orders
FROM customer_orders
GROUP BY 1
ORDER BY 2 DESC;

-- week day starts with 1 as sunday, so 2 monday, 3 wednsday, etc...
SELECT
	DAYNAME(order_time) AS day_of_the_week,
    COUNT(order_id) AS orders
FROM customer_orders
GROUP BY 1
ORDER BY 2 DESC;

-- B. Runner and Customer Experience
-- 1 How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
-- 2 What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
-- 3 Is there any relationship between the number of pizzas and how long the order takes to prepare?
-- 4 What was the average distance travelled for each customer?
-- 5 What was the difference between the longest and shortest delivery times for all orders?
-- 6 What was the average speed for each runner for each delivery and do you notice any trend for these values?
-- 7 What is the successful delivery percentage for each runner?


-- 1 How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT 
	WEEK(registration_date), -- because the first week appears as 0 I can add + 1 to start then from 1 --> WEEK(registration_date) + 1
    COUNT(runner_id) AS runners_registered
FROM runners
WHERE registration_date >= "2021-01-01"
GROUP BY 1;

-- 2 What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT
	runner,
    ROUND(AVG(time_to_collect),2) AS avg_time_pickup
FROM(
SELECT
	runner_id AS runner,
	TIMESTAMPDIFF(MINUTE, order_time, pickup_time) AS time_to_collect
FROM runner_orders r
	LEFT JOIN customer_orders c
		ON r.order_id = c.order_id
WHERE pickup_time <> "no") AS pickup
GROUP BY 1;

-- 3 Is there any relationship between the number of pizzas and how long the order takes to prepare?  (Answer: NO)

SELECT
	COUNT(c.order_id) AS num_of_pizzas,
    TIMESTAMPDIFF(MINUTE, order_time, pickup_time) AS time_to_prepare
FROM runner_orders r
	LEFT JOIN customer_orders c
		ON r.order_id = c.order_id
WHERE pickup_time <> "no"
GROUP BY 2
ORDER BY 2;

-- 4 What was the average distance travelled for each customer?
SELECT
	runner_id,
    AVG(distance) AS avg_distance
FROM runner_orders
GROUP BY 1;
	
-- 5 What was the difference between the longest and shortest delivery times for all orders?
SELECT 
	MAX(duration) - MIN(duration) AS diff_delivery_time
FROM runner_orders;

-- 6 What was the average speed for each runner for each delivery and do you notice any trend for these values?
-- (ANSWER: It seems that after the first order, the avg speed increase, but we do not have to enough data to confirm this trend)
-- speed is calculated = speed = distance / duration
-- if we want the result in km h, we have to convert our minutes in hour, so minutes / 60
SELECT
	r.runner_id,
    r.order_id,
    ROUND((distance / (duration / 60)), 2) AS avg_speed_Kmh
FROM runner_orders r
	LEFT JOIN customer_orders c
		ON r.order_id = c.order_id
WHERE pickup_time <> "no"
ORDER BY 1;

-- 7 What is the successful delivery percentage for each runner?
SELECT 
	runner_id,
    -- COUNT(order_id) AS total_orders,
    -- COUNT(CASE WHEN cancellation = "No canc" THEN order_id ELSE NULL END) AS completed,
    -- COUNT(CASE WHEN cancellation <> "No canc" THEN order_id ELSE NULL END) AS not_completed, 
    ROUND((COUNT(CASE WHEN cancellation = "No canc" THEN order_id ELSE NULL END) / COUNT(order_id)) * 100, 0) AS pct_successful_delivery
FROM runner_orders
GROUP BY 1;
    
-- C. Ingredient Optimisation
-- 1 What are the standard ingredients for each pizza?
-- 2 What was the most commonly added extra?
-- 3 What was the most common exclusion?
-- 4 Generate an order item for each record in the customers_orders table in the format of one of the following:
-- 		Meat Lovers
-- 		Meat Lovers - Exclude Beef
-- 		eat Lovers - Extra Bacon
-- 		Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
-- 5 Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
-- 		For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
-- 6 What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

SELECT * FROM customer_orders;
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;
SELECT * FROM pizza_names;

-- 1 What are the standard ingredients for each pizza?
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;
    
SELECT
	trim(name) as ingredient_id,
    COUNT(trim(name)) AS total
FROM (
SELECT
  pizza_recipes.pizza_id,
  SUBSTRING_INDEX(SUBSTRING_INDEX(pizza_recipes.toppings, ',', numbers.n), ',', -1) name
from
  (select 1 n union all
   select 2 union all select 3 union all
   select 4 union all select 5 union all
   select 6 union all select 7 union all
   select 8 union all select 9 union all
   select 10 union all select 11 union all
   select 12 union all select 13 union all
   select 14 union all select 15 union all
   select 16 union all select 17 union all
   select 18 union all select 19 union all
   select 20
   ) numbers INNER JOIN pizza_recipes
  on CHAR_LENGTH(pizza_recipes.toppings)
     -CHAR_LENGTH(REPLACE(pizza_recipes.toppings, ',', ''))>=numbers.n-1
order by
  1) AS ingredients
  GROUP BY 1
  ORDER BY 2 DESC;
    
 -- 2 What was the most commonly added extra?   
SELECT
	TRIM(name) AS extras,
    COUNT(TRIM(name)) AS total
FROM(
SELECT
	co.order_id,
    SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras, ',', numbers.n), ',', -1) name
FROM
  (select 1 n union all
   select 2 union all select 3 union all
   select 4 union all select 5 union all
   select 6 union all select 7 union all
   select 8 union all select 9 union all
   select 10 union all select 11 union all
   select 12 union all select 13 union all
   select 14 union all select 15 union all
   select 16 union all select 17 union all
   select 18 union all select 19 union all
   select 20
   ) numbers INNER JOIN customer_orders co
  on CHAR_LENGTH(co.extras)
     -CHAR_LENGTH(REPLACE(co.extras, ',', ''))>=numbers.n-1
order by
  1) AS extras_added
  WHERE TRIM(name) <> 0
  GROUP BY 1
  ORDER BY 2 DESC
  ;

  -- 3 What was the most common exclusion?  
  SELECT
	TRIM(name) AS exclusions,
    COUNT(TRIM(name)) AS total
FROM(
SELECT
	co.order_id,
    SUBSTRING_INDEX(SUBSTRING_INDEX(co.exclusions, ',', numbers.n), ',', -1) name
FROM
  (select 1 n union all
   select 2 union all select 3 union all
   select 4 union all select 5 union all
   select 6 union all select 7 union all
   select 8 union all select 9 union all
   select 10 union all select 11 union all
   select 12 union all select 13 union all
   select 14 union all select 15 union all
   select 16 union all select 17 union all
   select 18 union all select 19 union all
   select 20
   ) numbers INNER JOIN customer_orders co
  on CHAR_LENGTH(co.exclusions)
     -CHAR_LENGTH(REPLACE(co.exclusions, ',', ''))>=numbers.n-1
order by
  1) AS item_removed
  WHERE TRIM(name) <> 0
  GROUP BY 1
  ORDER BY 2 DESC;
   
   
-- 4 Generate an order item for each record in the customers_orders table in the format of one of the following:
-- 		Meat Lovers
-- 		Meat Lovers - Exclude Beef
-- 		eat Lovers - Extra Bacon
-- 		Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
SELECT * FROM customer_orders;
SELECT * FROM pizza_names;
SELECT * FROM pizza_toppings;

SELECT
	*,
	CASE WHEN pizza_id = 1 AND exclusions = 0 AND extras = 0 THEN "Meat Lovers" 
		 WHEN pizza_id = 2 AND exclusions = 0 AND extras = 0 THEN "Vegetarian"
         WHEN pizza_id = 1 AND exclusions = 3 AND extras = 0 THEN "Meat Lovers - Exclude Beef"
         WHEN pizza_id = 1 AND exclusions = 0 AND extras = 1 THEN "Eat Lovers - Extra Bacon"
         WHEN pizza_id = 1 AND exclusions IN(1,4) AND extras IN(6,9) THEN "Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers"
    ELSE "Other" END AS name_of_pizza
FROM customer_orders;

-- 5 Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
-- 		For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"


-- 5.1 Obtain all ingredients for each type of pizza and saved it in a temporary table 
-- CREATE TEMPORARY TABLE ingredients_list
SELECT
	pizza_id,
	trim(name) as ingredient_id,
    COUNT(trim(name)) AS total
FROM (
SELECT
  pizza_recipes.pizza_id,
  SUBSTRING_INDEX(SUBSTRING_INDEX(pizza_recipes.toppings, ',', numbers.n), ',', -1) name
from
  (select 1 n union all
   select 2 union all select 3 union all
   select 4 union all select 5 union all
   select 6 union all select 7 union all
   select 8 union all select 9 union all
   select 10 union all select 11 union all
   select 12 union all select 13 union all
   select 14 union all select 15 union all
   select 16 union all select 17 union all
   select 18 union all select 19 union all
   select 20
   ) numbers INNER JOIN pizza_recipes
  on CHAR_LENGTH(pizza_recipes.toppings)
     -CHAR_LENGTH(REPLACE(pizza_recipes.toppings, ',', ''))>=numbers.n-1
order by
  1) AS ingredients
  GROUP BY 1,2
  ORDER BY 1, 3 DESC;

-- check the temporary table created above
SELECT * FROM ingredients_list;

-- join 2 tables and obtain the name for each ingredient_id
SELECT 
	pizza_id,
    ingredient_id,
    topping_id,
	p.topping_name
FROM ingredients_list i
	LEFT JOIN pizza_toppings p
		ON i.ingredient_id = p.topping_id;
        

-- use the above query in an inner query to join with the customer_orders table for the final result
SELECT * FROM customer_orders;
SELECT
	order_id,
    customer_id,
    c.pizza_id,
    exclusions,
    extras,
    CASE WHEN c.pizza_id = 1 THEN  CONCAT("Meat Lovers: ", GROUP_CONCAT(topping_name SEPARATOR ", "))
		 WHEN c.pizza_id = 2 THEN  CONCAT("Vegetarians: ", GROUP_CONCAT(topping_name SEPARATOR ", ")) ELSE NULL END AS ingredients_name
    -- CASE WHEN extras = 1 THEN REPLACE(topping_name, extras, "") ELSE NULL END AS substitute
FROM 
(
SELECT 
	pizza_id,
    ingredient_id,
    topping_id,
	p.topping_name
FROM ingredients_list i
	LEFT JOIN pizza_toppings p
		ON i.ingredient_id = p.topping_id
        ) AS ingredients_name 
	LEFT JOIN customer_orders c
		ON ingredients_name.pizza_id = c.pizza_id
GROUP BY 1,2,3,4,5;


-- 6 What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
SELECT
	i.ingredient_id,
    p.topping_name,
    COUNT(i.ingredient_id) AS total
    
FROM customer_orders c
	LEFT JOIN ingredients_list i
		ON c.pizza_id = i.pizza_id
	LEFT JOIN pizza_toppings p
		ON i.ingredient_id = p.topping_id
GROUP BY 1,2
ORDER BY 3 DESC;

-- D. Pricing and Ratings
-- 1 If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
-- 2 What if there was an additional $1 charge for any pizza extras?
-- 		  Add cheese is $1 extra
-- 3 The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner,
--      how would you design an additional table for this new dataset - generate a schema for this new table and 
--      insert your own data for ratings for each successful customer order between 1 to 5.
-- 4 Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
-- 		 customer_id
-- 		 order_id
-- 		 runner_id
--       rating
--       order_time
--       pickup_time
--       Time between order and pickup
--       Delivery duration
--       Average speed
--       Total number of pizzas
-- 5 If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - how much money does Pizza Runner have left over after these deliveries?
    

-- 1 If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
SELECT
	p.pizza_name,
    SUM(CASE WHEN c.pizza_id = 1 THEN 12 
			 WHEN c.pizza_id = 2 THEN 10 ELSE 0 END) AS total
FROM customer_orders c
	LEFT JOIN pizza_names p
		ON c.pizza_id = p.pizza_id
	LEFT JOIN runner_orders r
		ON c.order_id = r.order_id
WHERE r.cancellation = "No Canc"
GROUP BY 1;

-- 2 What if there was an additional $1 charge for any pizza extras?
-- 		  Add cheese is $1 extra

SELECT * FROM customer_orders;


-- checking if there are extras using the length of a char for the multoiple extras

SELECT 
	SUM(pizza_cost) AS pizza,
    SUM(cost_extras) AS extras,
    SUM(pizza_cost) + SUM(cost_extras) AS total
FROM (
SELECT
	c.order_id,
    CASE WHEN pizza_id = 1 THEN 12 
		 WHEN pizza_id = 2 THEN 10 ELSE 0 END AS pizza_cost,
	CASE WHEN extras = "1" THEN 1 
		 WHEN CHAR_LENGTH(extras) = 4 THEN 2 ELSE 0 END AS cost_extras
	
FROM customer_orders c
	LEFT JOIN runner_orders r
		ON c.order_id = r.order_id
WHERE r.cancellation = "No canc") AS costs;


-- 3 The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner,
--      how would you design an additional table for this new dataset - generate a schema for this new table and 
--      insert your own data for ratings for each successful customer order between 1 to 5.		

CREATE TABLE runner_ratings (
  order_id  INTEGER,
  runner_id INTEGER,
  rating    INTEGER
);
INSERT INTO runner_ratings
  (order_id, runner_id, rating)
VALUES
  (1, 1, 3),
  (2, 1, 4),
  (3, 3, 4),
  (4, 3, 4),
  (5, 2, 5),
  (6, 4, 5),
  (7, 4, 5),
  (8, 2, 5),
  (9, 2, 5),
  (10, 4, 3);


-- 4 Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
-- 		 customer_id
-- 		 order_id
-- 		 runner_id
--       rating
--       order_time
--       pickup_time
--       Time between order and pickup
--       Delivery duration
--       Average speed
--       Total number of pizzas

SELECT * FROM runner_orders;

SELECT 
	c.order_id,
    runner.runner_id,
    rating.rating,
    c.order_time,
    runner.pickup_time,
    ROUND(TIME_TO_SEC(timediff(pickup_time,order_time))/60) diff_between_pickup_and_order,
	runner.duration AS delivery_duration,
    ROUND((runner.distance / (runner.duration / 60)), 2) AS avg_speed_Kmh,
	COUNT(c.pizza_id) AS total_pizzas
FROM customer_orders c
	LEFT JOIN runner_orders runner
		ON c.order_id = runner.order_id
	LEFT JOIN runner_ratings rating
		ON c.order_id = rating.order_id
WHERE runner.cancellation = "No canc"
GROUP BY 1,2,3,4,5,6,7,8
;

-- 5 If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled 
-- how much money does Pizza Runner have left over after these deliveries?
-- (ANSWER: 138 - 43.56 = 94.44)

SELECT
	SUM(total) AS total_made
FROM (
SELECT
	pizza_id,
	SUM(CASE WHEN pizza_id = 1 THEN 12 
			 WHEN pizza_id = 2 THEN 10 ELSE 0 END) AS total
FROM customer_orders c 
	LEFT JOIN runner_orders r
		ON c.order_id = r.order_id
WHERE r.cancellation = "No canc"
GROUP BY 1) AS totaL_pizza_sold;


SELECT 
	ROUND(SUM(distance) * 0.30, 2) AS total_paid_to_runners
FROM runner_orders;
-- Then I can save the second query as temporary table 
